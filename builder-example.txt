from abc import ABC, abstractmethod

# Product: Computer
class Computer:
    def __init__(self):
        self.cpu = None
        self.memory = None
        self.storage = None

    def __str__(self):
        return f"CPU: {self.cpu}, Memory: {self.memory}, Storage: {self.storage}"

# Abstract Builder
class ComputerBuilder(ABC):
    @abstractmethod
    def build_cpu(self):
        pass

    @abstractmethod
    def build_memory(self):
        pass

    @abstractmethod
    def build_storage(self):
        pass

    @abstractmethod
    def get_computer(self) -> Computer:
        pass

# Concrete Builders
class OfficeComputerBuilder(ComputerBuilder):
    def __init__(self):
        self.computer = Computer()

    def build_cpu(self):
        self.computer.cpu = "Intel Core i5"

    def build_memory(self):
        self.computer.memory = "8GB DDR4"

    def build_storage(self):
        self.computer.storage = "256GB SSD"

    def get_computer(self):
        return self.computer

class GamingComputerBuilder(ComputerBuilder):
    def __init__(self):
        self.computer = Computer()

    def build_cpu(self):
        self.computer.cpu = "Intel Core i9"

    def build_memory(self):
        self.computer.memory = "32GB DDR4"

    def build_storage(self):
        self.computer.storage = "1TB NVMe SSD"

    def get_computer(self):
        return self.computer

# Director
class ComputerShop:
    def construct_computer(self, builder: ComputerBuilder):
        builder.build_cpu()
        builder.build_memory()
        builder.build_storage()
        return builder.get_computer()

# Client code
computer_shop = ComputerShop()

office_computer_builder = OfficeComputerBuilder()
office_computer = computer_shop.construct_computer(office_computer_builder)
print("Office Computer:", office_computer)

gaming_computer_builder = GamingComputerBuilder()
gaming_computer = computer_shop.construct_computer(gaming_computer_builder)
print("Gaming Computer:", gaming_computer)


In this example, the Builder pattern is used to create different types of computers with consistent construction processes. The ComputerBuilder abstract class defines the common interface for building computers. Concrete builders (OfficeComputerBuilder and GamingComputerBuilder) implement this interface to construct specific types of computers. The ComputerShop class acts as the director, guiding the construction process. By using different builders and the same construction process, you can create computers with varying configurations and features.





